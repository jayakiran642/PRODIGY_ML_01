# -*- coding: utf-8 -*-
"""HousepricePrediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1puYXDFN8h1GYYTWwi0mwk7T61i81elap
"""

import pandas as pd

# Load the dataset
df = pd.read_csv('/content/train.csv')

# Display the first few rows of the dataset
print(df.head())

# Get basic information about the dataset
print(df.info())

# Summary statistics
print(df.describe())

# Check for missing values in the selected columns
print(df[['GrLivArea', 'BedroomAbvGr', 'FullBath', 'HalfBath']].isnull().sum())

# If there are missing values, you can fill them with the mean or median
df['GrLivArea'].fillna(df['GrLivArea'].median(), inplace=True)
df['BedroomAbvGr'].fillna(df['BedroomAbvGr'].median(), inplace=True)
df['FullBath'].fillna(df['FullBath'].median(), inplace=True)
df['HalfBath'].fillna(df['HalfBath'].median(), inplace=True)

# Create a new feature for total bathrooms
df['TotalBath'] = df['FullBath'] + 0.5 * df['HalfBath']

# Select features and target variable
X = df[['GrLivArea', 'BedroomAbvGr', 'TotalBath']]
y = df['SalePrice']

from sklearn.model_selection import train_test_split

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

from sklearn.linear_model import LinearRegression

# Initialize the Linear Regression model
model = LinearRegression()

# Train the model
model.fit(X_train, y_train)

from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

# Make predictions on the training set
y_train_pred = model.predict(X_train)

# Calculate metrics for training data
mae_train = mean_absolute_error(y_train, y_train_pred)
mse_train = mean_squared_error(y_train, y_train_pred)
r2_train = r2_score(y_train, y_train_pred)

# Print the metrics for training data
print("Training Data Metrics:")
print(f'Mean Absolute Error (MAE): {mae_train}')
print(f'Mean Squared Error (MSE): {mse_train}')
print(f'R-squared (RÂ²): {r2_train}')

# Make predictions on the test set
y_pred = model.predict(X_test)

# Evaluate the model
mae = mean_absolute_error(y_test, y_pred)
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
print("Testing Data Metrics:")
print(f'Mean Absolute Error: {mae}')
print(f'Mean Squared Error: {mse}')
print(f'R-squared: {r2}')

# Example: Predict the price of a house with 2000 sqft, 3 bedrooms, and 2 bathrooms
new_house = [[2000, 3, 2]]
predicted_price = model.predict(new_house)
print(f'Predicted Price: {predicted_price[0]}')